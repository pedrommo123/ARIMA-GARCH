install.packages( "PerformanceAnalytics")
install.packages("quantmod")
install.packages("tidyquant")
install.packages("lubridate")
# 1
library(PerformanceAnalytics)
library(quantmod) 
library(dplyr)
install.packages("tidyquant")
install.packages("lubridate")
library(tidyquant)
library(lubridate)
options("getSymbols.warning4.0"=FALSE)
options("getSymbols.yahoo.warning"=FALSE)
getSymbols("^GSPC", from = "2021-01-01",
 to = "2022-09-10",warnings = FALSE,
 auto.assign = TRUE)
head(GSPC)
plot(GSPC$GSPC.Adjusted, main = "SP 500: Precio ajustado")
23
log_ret_SP <- diff (log (GSPC$GSPC.Adjusted))
plot(log_ret_SP* 100,
 main = "SP 500 : % Log_ret")
getSymbols("^TNX", from = "2021-01-01",
 to = "2022-09-10",warnings = FALSE,
 auto.assign = TRUE)
plot(TNX$TNX.Adjusted, main = "Precio bono 10 años")
log_ret_bono <- diff (log (TNX$TNX.Adjusted))
plot(log_ret_bono* 100,
 main = "bono :% Log_ret")
data = cbind(log_ret,log_ret_bono)
data2 = as.data.frame(data)
matplot(data,
 main="S&P 500 vs. 10-Year Treasury",
 ylab="'!s return",
 type='l')
## RISK METRICS ##
library (TTR)
library(PerformanceAnalytics)
sd(na.omit(log_ret_SP))
sd(na.omit(log_ret_bono))
24
vol_anualizada_SP = sd(na.omit(log_ret_SP))*sqrt(12)
vol_anualizada_bono = sd(na.omit(log_ret_bono))*sqrt(12)
##rolling annualized volatility
vol_roll_SP <-na.omit(rollapply(log_ret_SP,
width=12, FUN=sd) * sqrt(12))
## Cleaned volatility (eliminar outliers)
library(PerformanceAnalytics)
round(StdDev(log_ret, clean=c("geltner")), 5)
## Alternativas volatilidad: Sharpe ratio##
round(SharpeRatio.annualized(log_ret_SP, Rf = 0.01/12), 3)
round(SharpeRatio.annualized(log_ret_bono, Rf = 0.01/12), 3)
## Alternativas volatilidad: Sortino ratio##
round(SortinoRatio(log_ret_SP), 3)
##beta
CAPM.beta (Ra=log_ret_SP, log_ret_bono)
 ## VaR###
quantile(log_ret_SP,0.05,na.rm = T)
quantile(log_ret_bono,0.05,na.rm = T)
25
sp500.sort <-sort(as.numeric(log_ret_SP))
sp500.sort.var95 <-quantile(sp500.sort,0.05)
plot(sp500.sort,
 type= 'l' , 
 main="Retornos ordenados S&P : 2021-2022",
ylab="Retornos diarios")
abline (h=sp500.sort.var95, lty= 2)
legend(lty=2, "bottomright", c("5% quantile"))
bono.sort <-sort(as.numeric(log_ret_bono))
bono.sort.var95 <-quantile(bono.sort,0.05)
plot(bono.sort,
 type= 'l' , 
 main="Retornos ordenados bono : 2021-2022",
 ylab="Retornos diarios")
abline (h=sp500.sort.var95, lty= 2)
legend(lty=2, "bottomright", c("5% quantile"))
##Short fall risk##
pnorm(q=0,
 mean=mean(na.omit(log_ret_SP)),
 sd=sd(na.omit(log_ret_SP)),
 lower.tail=TRUE)
pnorm(q=0,
26
 mean=mean(na.omit(log_ret_bono)),
 sd=sd(na.omit(log_ret_bono)),
 lower.tail=TRUE)
#probabilidad de retorno negativo 0.4893085
#drawdown. Caidas a minimos
table.Drawdowns(na.omit(log_ret_SP),top = 3)
library(timeSeries)
dd.history = drawdowns(timeSeries(log_ret_SP))
plot(dd.history*100,type = "l",main = "S&P Drawdowns",ylab = "Drawdown")
#### Rebalancing and backtesting###
#backtesting 60/40
wgt.60.40 <- c(0.6,0.4)
port.60.40.rebal <-Return.portfolio (na.omit(data),
 rabalance_on = "days" ,
 weights=wgt.60.40,
27
 wealth.index = TRUE)
port.60.40.norebal <-Return.portfolio(na.omit(data),
 weights = wgt.60.40,
 wealth.index=TRUE)
rebal.wi.l <-cbind(port.60.40.rebal,
 port.60.40.norebal)
colnames (rebal.wi.l) <-c("Rebal", "No Rebal")
matplot(rebal.wi.l,
 main="Wealth Indexes",
 ylab="",
 xlab="",
type="l",
lty=1,
col = c("black", "gray"))
legend(lty=c(1) ,"topleft",
c(colnames(rebal.wi.l)),
col= c("black", "gray"))
legend("bottomright", c("Dec. 31, 1995 = 1.0"))
log_ret_SP = na.omit(log_ret_SP)
library(TTR)
ret <- ROC(rebal.wi.l, n=1, type="discrete", na.pad=FALSE)
port.ret <- Return.annualized(log_ret_SP , scale=12)
port.sd <- apply(log_ret_SP , 2, sd) * sqrt(12)
port.sr <- SharpeRatio.annualized(log_ret_SP)
port.sortino <- SortinoRatio(log_ret_SP)
risk.ret <- round(rbind(port.ret, port.sd,
 port.sr, port.sortino), 3)
rownames(risk.ret) <- c("returns:",
 "volatility:",
 "Sharpe Ratio:",
28
 "Sortino Ratio")
risk.ret
###tactical alocation. Podemos valorar resultados de estrategia rebalanceada usando MA.
##Step 1: Generate prices file; define and generate signal data
prices <- apply(na.omit(data), 2, function(x) cumprod(1+x))
prices.xts <- xts(prices, order.by=index(na.omit(data)))
sig.1 <- prices.xts / rollmean(prices.xts, k=10, align=c("right"))
sig.2 <- apply(sig.1, 2, function(x) ifelse(x >1, yes=1, no=0))
sig.3 <- xts(sig.2, as.Date(index(tail(data, nrow(sig.2)))))
sig.lag <- na.omit(lag(sig.3, k=1))
##Step 2: Create backtest returns
strategy.ret <- na.omit(data * sig.lag)
#Step3:Generate wealth index
strategy.wi <- cumprod(1 + strategy.ret)
wgt <-c(0.60, 0.40)
strategy.wgt <- sweep(strategy.wi, MARGIN=2, STATS=wgt, FUN="*")
taa.wi <- xts(apply(strategy.wgt, 1, sum),
 as.Date(index(strategy.wi)))
#Analyze results
wi.3.ret <- na.omit(ROC(cbind(port.60.40.rebal, port.60.40.norebal, taa.wi),
 1, "discrete"))
wi.3 <- xts(apply(wi.3.ret, 2, function(x) cumprod(1+x)),
 as.Date(index(wi.3.ret)))
colnames(wi.3) <- c("Rebal", "No Rebal", "Tactical")
wi.3
29
matplot(wi.3,
 main="Indicadores de riq",
 ylab="",
 xlab="", 
 type="l",
 col=c("black", "blue", "red"))
legend(lty=c(1,1,3),"topleft", 
 c(colnames(wi.3)), 
 col=c("black", "blue", "red"))
wi.3.monthly.ret <- ROC(wi.3, n=1, type="discrete", na.pad=FALSE)
wi.3.annl.ret <- Return.annualized(wi.3.monthly.ret , scale=12)
wi.3.sd <- apply(wi.3.monthly.ret , 2, sd) * sqrt(12)
wi.3.sr <- SharpeRatio.annualized(wi.3.monthly.ret)
wi.3.sortino <- SortinoRatio(wi.3.monthly.ret)
risk.ret.wi.3 <-round(
 rbind(wi.3.annl.ret, wi.3.sd, wi.3.sr, wi.3.sortino), 4)
rownames(risk.ret.wi.3) <-c("return:",
 "volatility:",
 "Sharpe Ratio:",
 "Sortino Ratio")
risk.ret.wi.3
##### Estimating optimal portfolio
library(PerformanceAnalytics)
30
returns <- data
summary(returns)
library(quadprog)
cov.mat <- cov(na.omit(returns))
n <- ncol(cov.mat)
zero.mat <- array(0, dim=c(n,1))
one.mat <- matrix (1, nrow=n)
bvec.1 <- 1
meq.1 <- 1
port <-solve.QP(Dmat=cov.mat, dvec=zero.mat, Amat=one.mat,
 bvec=bvec.1, meq=meq.1)
port.wgt <- round(as.matrix(port$solution) * 100, digits=2)
rownames(port.wgt) <-c(names(returns))
colnames(port.wgt) <-c("MVP % weights")
port.wgt
one.zero.diagonal <- cbind(1, diag(n))
bvec.1.vector <- as.matrix(c(1, rep(0, n)))
port.noshort <- solve.QP(Dmat=cov.mat, dvec=zero.mat, Amat=one.zero.diagonal, 
 bvec=bvec.1.vector, meq=meq.1)
port.noshort.wgt <- round(as.matrix(port.noshort$solution) * 100, digits=2)
rownames(port.noshort.wgt) <-c(names(returns))
colnames(port.noshort.wgt) <-c("MVP % weights")
port.noshort.wgt
one.zero.diagonal.lmt <- cbind(1, diag(n), 1*diag(n), -1*diag(n))
min.wgt <-rep(0.15, n)
max.wgt <-rep(0.50, n)
31
bvec.1.vector.lmt <- c(1, rep(0, n), min.wgt, -max.wgt)
port.noshort.lmt <-solve.QP(Dmat=cov.mat, dvec=zero.mat, meq=meq.1,
 Amat=one.zero.diagonal.lmt,
 bvec=bvec.1.vector.lmt)
port.noshort.lmt.wgt <- round(
 as.matrix(port.noshort.lmt$solution) * 100, digits=2)
rownames(port.noshort.lmt.wgt) <-c(names(returns))
colnames(port.noshort.lmt.wgt) <-c("MVP % weights")
port.noshort.lmt.wgt
port.wgt
port.noshort.wgt
port.noshort.lmt.wgt
# 4.2
library(xts)
library(TTR)
library(fPortfolio)
library(fAssets)
library(DEoptimR)
library(timeSeries)
data("data")
?data
summary(data)
n <-ncol(returns)
lmt <- c("minW[1:n]=0.15", "maxW[1:n]=0.5")
constraints <- minvariancePortfolio(na.omit(returns), constraints=lmt)
32
constraints
round(constraints@portfolio@portfolio$weights * 100, 2)
eff <- portfolioFrontier(returns)
eff
lmt <- c("minW[1:n]=0.10", "maxW[1:n]=0.5",
 "minsumW[c(5:6)]=0.30", "maxsumW[c(5:6)]=0.45")
constraints <- minvariancePortfolio(returns, constraints = lmt)
round(constraints@portfolio@portfolio$weights * 100, 2)
####Factores
# 5.1
library(xts)
download.file("http://bit.ly/2ikMUxn",
 destfile="F-F_Research_Data_Factors.zip", mode='wb')
unzip("F-F_Research_Data_Factors.zip")
library(readr)
F_F_Research_Data_Factors <- read_csv("F-F_Research_Data_Factors.CSV", col_names = 
FALSE, skip = 1000)
ff_new <- F_F_Research_Data_Factors[1:157,]
names(ff_new) <- c("Date", "MKT", "SMB", "HML", "RF")
summary(ff_new)
ff_new$Date <- as.Date(ff_new$Date,"%Y%m")
data_frame[ , vec] <- apply(data_frame[ , vec,drop=F], 2, 
 function(x) as.numeric(as.character(x)))
ff.3 <-ff_new[,2:4]
33
i = c(1,2,3)
typeof(ff.3)
ff_df <- data.frame((sapply(ff.3,c)))
ff_df[ , i] <- apply(ff_df[ , i], 2, # Specify own function within apply
 function(x) as.numeric(as.character(x)))
sapply(ff_df, class) 
ff.4 <- ff_df[141:157,]
dates.1 <-dates[1:17]
ff.dates <-xts(as.matrix(ff.4), as.Date(dates.1))
summary(ff.dates)
####
library(PerformanceAnalytics)
ret <-to.monthly(ret, indexAt='firstof', OHLC=F)
cartera <- ret$cartera
summary(cartera)
cartera <- ret$cartera
dates <- as.Date(index(cartera))
subset <- ff.dates[paste0(dates)] * 0.01
ff.factors <- cbind(subset, cartera)
summary(ff.factors)
fit <-lm(cartera ~ ., data = ff.factors)
summary(fit)
34
estimate <- fit$coefficients[1] +
 fit$coefficient[2] * ff.factors$MKT +
 fit$coefficient[3] * ff.factors$SMB +
 fit$coefficient[4] * ff.factors$HML
####
#### SIMULACION MONTECARLO
# 6.1
library(PerformanceAnalytics)
##Utilizamos portfolio optimo calculado previamente
ret = as.xts(data$GSPC.Adjusted*0.8774 + data$TNX.Adjusted*0.1226)
summary(ret)
set.seed(994)
ret.sim.1 <- sample(ret, replace=TRUE)
summary(ret.sim.1)
ret.all <-cbind(ret, as.numeric(ret.sim.1))
head(ret.all)
ret.all_2 <- na.omit(ret.all)
head(ret.all_2)
matplot(ret.all_2, type='l',ylab = "Retornos y primera simulación")
set.seed(645)
ret.sim.2 <-sample(as.numeric(ret), size=1000, replace=TRUE)
summary(ret.sim.2)
35
library(PerformanceAnalytics)
summary(ret)
set.seed(44)
ret.sim <-apply(ret, 2, function(x) sample(x, replace=TRUE))
ret.sim.1 <-xts(ret.sim, order.by=as.Date(index(ret)))
summary(ret.sim.1)
matplot(ret.sim.1, type='l')
wgt <-c(0.6, 0.3, 0.1)
f <-function(i, j) {
 r <-apply(i, 2, function(x) sample(x, replace=TRUE))
 r.1 <-xts(r, as.Date(index(i)))
 
 p <-Return.portfolio(r.1, rebalance_on="days",
 weights=j, wealth.index=TRUE)
}
set.seed(48)
port.sim.1 <-f(ret, wgt)
summary(port.sim.1)
matplot(port.sim.1, type='l')
set.seed(48)
port.sim <-do.call(cbind, lapply(1:5, function(x) f(ret, wgt)))
summary(port.sim)
matplot(port.sim, type='l')
port.actual <-Return.portfolio(ret, rebalance_on="years",
 weights=wgt, wealth.index=TRUE)
36
summary(port.actual)
matplot(port.actual, type='l')
port.all <-cbind(port.actual, port.sim)
matplot(port.all[,2:6], col="gray", type='l',
 ylab="", main="Wealth Indexes")
par(new=TRUE)
matplot(port.all[,1], col="black", type='l',
 yaxt="n", xaxt="n", ylab="", lwd=2)
legend("bottomright", c("simulated", "actual"), fill=c("gray", "black"))
# 6.2
set.seed(401)
ret <- rnorm(100, mean=0.05, sd=0.10)
prices <-cumprod(1 + ret)
summary(ret)
summary(prices)
prices <-cumprod(c(66.8, 1+ret))
summary(prices)
library(PerformanceAnalytics)
data(managers)
mean <-mean(na.omit(ret))
sd <-sd(na.omit(ret))
mean(na.omit(ret))
mean
sd
set.seed(49)
sim <-rnorm(100, mean=mean, sd=sd) 
summary(sim)
matplot(sim, type='l')
37
set.seed(49)
sim.1 <-xts(rnorm(nrow(ret), mean=mean, sd=sd),
 as.Date(index(ret)))
summary(sim.1)
matplot(sim.1, type='l')
library(PerformanceAnalytics)
library(MASS)
set.seed(782)
assets.sim <-mvrnorm(n=nrow(managers[,8:10]),
 mu=colMeans(managers[,8:10]),
 Sigma=var(managers[,8:10]))
summary(assets.sim)
colMeans(managers[,8:10])
colMeans(assets.sim)
apply(managers[,8:10], 2, sd)
apply(assets.sim, 2, sd)
summary(assets.sim)
matplot(assets.sim, type='l')
# 6.3
library(quantmod)
library(MASS)
library(PerformanceAnalytics)
data("managers")
ret <- managers[,8]
ret.t.model <- fitdistr(ret, "t")
ret.t.model
38
set.seed(23)
t.ret <- rt(100000, df=13) * 0.01
summary(t.ret)
matplot(t.ret, type='l')
set.seed(77)
norm.ret <- rnorm(100000, mean=0.05/252, sd=0.15/sqrt(252))
summary(norm.ret)
matplot(norm.ret, type='l')
library(PerformanceAnalytics)
t.kurt <- kurtosis(t.ret)
norm.kurt <- kurtosis(norm.ret)
# t is larger than normal
t.kurt
norm.kurt
set.seed(77)
norm.ret <- rnorm(100, mean=0.05/252, sd=0.15/sqrt(252))
prices <- cumprod(1+norm.ret)
plot(prices,type='l', main="Wealth Index")
library(mvtnorm)
library(QRM)
library(PerformanceAnalytics)
data(managers)
fit <- fit.mst(managers[,8:10])
mu <- fit$mu
sigma <- as.matrix(fit$Sigma)
nu <- fit$df
n <- nrow(managers[,8:10]) 
39
fit
set.seed(198)
sim.dat <- rmvt(n=n, sigma=sigma, df=nu, delta=mu)
sim.dat <- xts(sim.dat, as.Date(index(managers[,8:10])))
summary(sim.dat)
matplot(sim.dat, type='l')
# 6.4
library(PerformanceAnalytics)
data(managers)
ret <- managers[,c(1,3,4,8)]
colnames(ret) <-c("HF-A", "HF-B", "HF-C", "SP500")
summary(ret)
matplot(ret, type='l')
fit <- lm(ret$SP500 ~ ., data=ret)
fit
f <-function(model, indices, x) {
 i <- indices[x,]
 o <- lm(model, data=i)
 return(coef(o))
}
library(boot)
set.seed(61)
results <- boot(data=ret, statistic=f, R=1000, equation=SP500 ~ .)
results
results.ci <-boot.ci(results, type="basic", index=2)
results.ci
40
plot(results, index=2)
# boot examples
library(boot)
?city
summary(city)
pairs(city)
ratio <- function(d, w) sum(d$x * w) / sum(d$u * w)
city.boot <- boot(city, ratio, R=99, stype="w", sim="ordinary")
city.boot
city.ci <- boot.ci(city.boot, conf=c(.90, .95),
 type=c("norm", "basic", "perc", "bca"))
city.ci
boot.array(city.boot)
perm.cor <- function(d, i) cor(d$x, d$u[i])
city.perm <- boot(city, perm.cor, R=99, sim="permutation")
city.perm
city.perm.ci <- boot.ci(city.perm, conf=c(.90, .95),
 type=c("norm", "basic", "perc"))
city.perm.ci
boot.array(city.perm, indices=TRUE)
?gravity
summary(gravity)
pairs(gravity)
cartera.means <- function(d, f) {
 n <- nrow(d)
 gp1 <- 1:table(as.numeric(d$series))[1]
 m1 <- sum(d[gp1,1] * f[gp1])/sum(f[gp1])
41
 m2 <- sum(d[-gp1,1] * f[-gp1])/sum(f[-gp1])
 ss1 <- sum(d[gp1,1]^2 * f[gp1]) - (m1 * m1 * sum(f[gp1]))
 ss2 <- sum(d[-gp1,1]^2 * f[-gp1]) - (m2 * m2 * sum(f[-gp1]))
 c(m1 - m2, (ss1 + ss2)/(sum(f) - 2))
}
g <- gravity[as.numeric(gravity[,2]) >= 7,]
g.boot <- boot(g, cartera.means, R=99, stype="f", strata=g[,2])
g.boot
g.ci <- boot.ci(g.boot, type=c("stud", "norm"))
g.ci
